@{
    ViewData["Title"] = "Szyfrowanie";
}
<div id="errorMessage"></div>
<div class="card-container">
    <!--Szyfr Cezara-->
    <div class="card SzyfrCezara">
        <h2>Szyfrowanie Cezara</h2>
        <p>Podaj tekst do zaszyfrowania:</p>
        <input type="text" id="EncryptCezarInput" class="szyfrowanieTekstuCezara-screen">
        <p>Podaj klucz przesunięcia:</p>
        <input type="number" id="CezarKey" class="szyfrowanieTekstuCezara-key">
        <div class="szyfrowanieTekstu-buttons">
            <button type="button" class="btn bg-success" onclick="encryptCezar()">Zaszyfruj</button>
        </div>
        <p id="zaszyfrowanyCezarTekst"></p>
    </div>

    <!--Łamacz Cezara-->
    <div class="card OdszyfrowanieCezara">
        <h2>Łamacz Cezara</h2>
        <p>Podaj tekst do odszyfrowania:</p>
        <input type="text" id="DecryptCezarInput" class="lamaczSzyfruCezara-screen">
        <p>Podaj klucz przesunięcia:</p>
        <input type="number" id="CezarKeyDecrypt" class="szyfrowanieTekstuCezara-key">
        <div class="lamaczSzyfru-buttons">
            <button type="button" class="btn bg-success button" onclick="decryptCezar()">Odszyfruj</button>
        </div>
        <p id="odszyfrowanyCezarTekst"></p>
    </div>

    <!--Szyfr Vigener`a-->
    <div class="card SzyfrowanieVigenerea">
        <h2>Szyfrowanie Vigenere</h2>
        <p>Podaj tekst do zaszyfrowania:</p>
        <input type="text" id="EncryptVigenereInput" class="szyfrowanieTekstuVigenerea-screen">
        <p>Podaj klucz w postaci słowa:</p>
        <input type="text" id="VigenereKey" class="szyfrowanieTekstuVigenerea-key">
        <div class="szyfrowanieTekstu-buttons">
            <button type="button" class="btn bg-success button" onclick="encryptVigenere()">Zaszyfruj</button>
        </div>
        <p id="zaszyfrowanyVigenereTekst"></p>
    </div>

    <!--Łamacz Vigener`a-->
    <div class="card OdszyfrowanieVigenerea">
        <h2>Łamacz Vigenere</h2>
        <p>Podaj tekst do odszyfrowania:</p>
        <input type="text" id="DecryptVigenereInput" class="lamaczSzyfruVigenerea-screen">
        <p>Podaj klucz w postaci słowa:</p>
        <input type="text" id="VigenereKeyDecrypt" class="lamaczSzyfruVigenerea-key">
        <div class="lamaczSzyfru-buttons">
            <button type="button" class="btn bg-success button" onclick="decryptVigenere()">Odszyfruj</button>
        </div>
        <p id="odszyfrowanyVigenereTekst"></p>
    </div>

    <!--Automatyczny Łamacz Cezara-->
    <div class="card automatyczneOdszyfrowanieCezara">
        <h2>Automatyczny Łamacz Cezara</h2>
        <p>Podaj tekst do odszyfrowania:</p>
        <input type="text" id="DecryptAutoCezarInput" class="lamaczSzyfruCezara-screen">
        <div class="autoLamacz-button">
            <button type="button" class="btn bg-success button" onclick="automaticDecryptCezar()">Automatyczne Odszyfrowanie</button>
        </div>
        <p>Znalezione słowa:</p>
        <p id="odszyfrowanyCezarTekst2"></p>
    </div>
</div>


@*<div class="navigation-buttons">
    <button class="btn bg-success" onclick="previousCard()">&#8249; Poprzednia</button>
    <button class="btn bg-success" onclick="nextCard()">Następna &#8250;</button>
</div>*@


@section Scripts
    {
    <script type="text/javascript">
        //zmienna globalna stała, te przesunięcie cezara o 3
        const CEZAR_SHIFT = 3;
        //funkcja czyszczenia komunikatu błedu po3 sekundach
        function showErrorMessage(message) {
            var errorMessageContainer = $("#errorMessage");
            errorMessageContainer.text(message).show();

            setTimeout(function () {
                errorMessageContainer.fadeOut("slow");
            }, 3000);
        }
        // szyfrowanie cezara
        function encryptCezar() {
            var inputText = $("#EncryptCezarInput").val();
            var key = parseInt($("#CezarKey").val());

            if (isNaN(key)) {
                showErrorMessage("Wprowadź poprawny klucz (liczbę całkowitą).");
                return;
            }

            var shiftedText = shiftText(inputText, key);
            $("#zaszyfrowanyCezarTekst").text(shiftedText);
            $("#EncryptCezarInput, #CezarKey").val("");
        }
        // łamanie szyfru cezara
        function decryptCezar() {
            var inputText = $("#DecryptCezarInput").val();
            var key = parseInt($("#CezarKeyDecrypt").val());

            if (isNaN(key)) {
                showErrorMessage("Wprowadź poprawny klucz (liczbę całkowitą).");
                return;
            }

            var shiftedText = shiftText(inputText, -key);
            $("#odszyfrowanyCezarTekst").text(shiftedText);
            $("#DecryptCezarInput, #CezarKeyDecrypt").val("");
        }

        // szyfrowanie vigenera
        function encryptVigenere() {
            const inputText = getInputText("EncryptVigenereInput");
            const key = getInputText("VigenereKey");

            if (!validateAlphabetic(key)) {
                showErrorMessage("Wprowadź poprawny klucz (tylko litery alfabetu angielskiego).");
                return;
            }

            const encryptedText = vigenereEncrypt(inputText, key);
            displayResult("zaszyfrowanyVigenereTekst", encryptedText);
            clearInput("EncryptVigenereInput", "VigenereKey");
        }
        // łamanie szyfru vigenera
        function decryptVigenere() {
            const inputText = getInputText("DecryptVigenereInput");
            const key = getInputText("VigenereKeyDecrypt");

            if (!validateAlphabetic(key)) {
                showErrorMessage("Wprowadź poprawny klucz (tylko litery alfabetu angielskiego).");
                return;
            }

            const decryptedText = vigenereDecrypt(inputText, key);
            displayResult("odszyfrowanyVigenereTekst", decryptedText);
            clearInput("DecryptVigenereInput", "VigenereKeyDecrypt");
        }
        //automatyczne łamanie szyfru cezara
        function automaticDecryptCezar() {
            var cipherText = $("#DecryptAutoCezarInput").val();
            var decryptedTextContainer = $("#odszyfrowanyCezarTekst2");
            var keyInput = $("#CezarKeyDecrypt");
            decryptedTextContainer.text("");

            for (var key = 1; key <= 25; key++) {
                var decryptedText = shiftText(cipherText, -key);
                var result = "Próba z kluczem " + key + ": " + decryptedText;
                decryptedTextContainer.append(result + "<br>");

                // jeżeli będzie sensowne słowo ustawi je w polu wyjścia
                if (isDecryptedTextSensible(decryptedText)) {
                    keyInput.val(key);
                    break;
                }
            }
        }
        function isDecryptedTextSensible(text) {
            var commonWords = ["the", "and", "is", "in", "it","love"]; //lista przykładowych popularnych słów

            for (var i = 0; i < commonWords.length; i++) {
                if (text.toLowerCase().includes(commonWords[i])) {
                    return true;
                }
            }

            return false;
        }

        // funkcja przesuwająca 
        function shiftText(text, shift) {
            let result = "";

            for (let i = 0; i < text.length; i++) {
                const charCode = text.charCodeAt(i);

                if (isUpperCaseLetter(charCode)) {
                    result += String.fromCharCode(((charCode - 65 + shift + 26) % 26) + 65);
                } else if (isLowerCaseLetter(charCode)) {
                    result += String.fromCharCode(((charCode - 97 + shift + 26) % 26) + 97);
                } else {
                    result += text[i];
                }
            }

            return result;
        }

        // funkcja szyfrująca vigenera
        function vigenereEncrypt(plainText, key) {
            let result = "";
            let keyIndex = 0;

            for (let i = 0; i < plainText.length; i++) {
                const charCode = plainText.charCodeAt(i);

                if (isPrintableAscii(charCode)) {
                    const shift = key.charCodeAt(keyIndex) - 32;
                    const shiftedCharCode = (charCode - 32 + shift) % 94 + 32;

                    result += String.fromCharCode(shiftedCharCode);
                    keyIndex = (keyIndex + 1) % key.length;
                } else {
                    result += plainText[i];
                }
            }

            return result;
        }

        // deszyfrowanie vigenera
        function vigenereDecrypt(cipherText, key) {
            let result = "";
            let keyIndex = 0;

            for (let i = 0; i < cipherText.length; i++) {
                const charCode = cipherText.charCodeAt(i);

                if (isPrintableAscii(charCode)) {
                    const shift = key.charCodeAt(keyIndex) - 32;
                    const shiftedCharCode = (charCode - 32 - shift + 94) % 94 + 32;

                    result += String.fromCharCode(shiftedCharCode);
                    keyIndex = (keyIndex + 1) % key.length;
                } else {
                    result += cipherText[i];
                }
            }

            return result;
        }

        // pobieranie tekstu z pól tekstowych 
        function getInputText(inputId) {
            return $(`#${inputId}`).val().trim();
        }

        // wyświetlanie wyniku
        function displayResult(resultId, text) {
            $(`#${resultId}`).text(text);
        }

        // czyszczenie pola tekstowego
        function clearInput(inputId) {
            $(`#${inputId}`).val("");
        }

        // czy unicode duże litery w ascii
        function isUpperCaseLetter(charCode) {
            return charCode >= 65 && charCode <= 90;
        }

        // czy unicode małe litery
        function isLowerCaseLetter(charCode) {
            return charCode >= 97 && charCode <= 122;
        }

        // sprawdzanie czy unicode odpowiada ascii
        function isPrintableAscii(charCode) {
            return charCode >= 33 && charCode <= 126;
        }

        // sprawdzanie czy są cyfry i polskie znaki 
        function validateAlphabetic(text) {
            return /^[a-zA-Z]+$/.test(text);
        }

        // wyświetlanie błedu 
        function showError(message) {
            $("#errorMessage").text(message).show();
        }


    </script>
}
